=========================
About WPF
=========================

:著者: 松居　友平

WPFについて
==================

**WPF(Windows Presentation Foundation)** 

* DirectXをベースにした描画エンジン
* Windowsアプリケーションを構築するためのフレームワーク

これまでのデスクトップアプリケーションとの大きな違いは描画エンジンにあると思います。
また、WPFではXAMLというXMLベースの言語でGUIを記述します

WPFのフレームワーク
=====================

これまでは、**System.Windows.Forms** フレームワークを利用してソフトを作成。

.net Framework 3.0以降は*WPF* か*Windows Form* のどちらかか、
その両方を混在させてソフトを作成することができる

.. figure:: /About_WPF/xaml01_01.gif

   WPFとFormアプリケーション

* 3.0以降はWPF、Formクラスを包含

   共存して使える

* WPFのクラスとFormのクラスは別物

   従来のプログラミング方法と同様にコントロールは扱えない

* ADO.netクラスなどはFormとはもともと別のクラスなので従来通り利用できる

WPFの特徴
=====================

--------------------
XMLベースのXAML
--------------------

* 従来の方法

   C#のコードのみでUIを記述（ほぼ自動で作成）

   自動的にある程度のUIを作成することができたが、自由度がない

* WPF

   XALMでUIを詳細に記述できる（もちろんある程度は自動で生成）

   非常に自由度が高いが、最初は面倒

---------------------
ベクタグラフィックス
---------------------

WPFではベクタグラフィックスが採用されている（V.S. ラスタグラフィックス）

* 各要素の拡大・縮小、回転などが可能になった

* アンチエイリアス

::

  タブレットを利用した開発に重要な意味を持ちます

  表示されている文字などを好きな大きさに変更できます

--------------------------
画面設計とロジックの分離
--------------------------

最近のスマートフォンプログラミングは、

#. XMLでUI作成

#. 各々のコードで機能を実装

が主流となっています。

タブレット用のプログラミングを行うための開発方式
============================================

Windowsのタブレットでのソフトウェア開発

==================== ==================================
開発方式               特徴
==================== ==================================
Windows Form          従来の方法
WPF                   XALMでUIを記載。デスクトップ向け
ストアアプリ               タブレットに特化したプログラミング
==================== ==================================


==================== =============================================
開発方式               欠点
==================== =============================================
Windows Form          解像度の変化に弱い（各環境に合わせた設計）
WPF                   中途半端（単なるきれいなデスクトップアプリ）
ストアアプリ               ADO.netが利用できない
==================== =============================================

本来であればストアアプリ形式で作成するのが一番良いが、
データベースの操作ができない。

.. note::

  サーバーサイドでデータベースを操作する仕組みを作成すれば、
  ストアアプリでもデータベース関連のソフトの作成が可能

結果的に、WPFを選択せざるを得ない

* 中途半端だが、タブレット以外（Win7）でも使用可能

.. warning:: 注意

   WPFでは公式にChartをサポートしていないので、
   独自に組み込む必要があります。

WPFのUI要素の種類
=============================

============ ============================== ==========================
種類           備考                            例
============ ============================== ==========================
コントロール       ボタンなどの一般的なコントロール         Button,TextBlock
コンテナ          要素を配置する                    StackPanel,WarpPanel
シェイプ          ベクターグラフィックを猫華する            Rectangle,Ellipse,Path
メディア          画像、動画                       Image,MediaElement
ドキュメント       文書の配置                       RichTextBox
============ ============================== ==========================

WPFではコンテナとシェイプが大きな特徴となります

----------------------------
標準のコントロール
----------------------------

* これまでのWindows.Formと同様のコントロールが用意されている

.. figure:: /About_WPF/ap-introwpf_01_08.gif

   コントロールの例

.. figure:: /About_WPF/l_ap-introwpf_01_09.gif

   DataGridViewの代わりにGridViewが用意されている

.. note:: 注意

   これまでのGataGridViewと利用方法が異なるので注意すること

WPF ToolKit
------------------

Windows.FormにあったものがWPFの標準コントロールには無い物がある

ただし、`WPF ToolKit <http://wpf.codeplex.com/>`_
に様々なコントロールが用意されているので、インストールすれば利用できる。
Chartなども含まれる

`Extended WPF ToolKit <http://wpftoolkit.codeplex.com/>`_
もあるので、必要に応じて利用すること。

-------------------------
コンテナ
-------------------------

WPFではウィンドウにコンテナを配置のが基本

* StackPanel

   各UIを順番に並べて配置する。プロパティで縦方向か横方向か決められる。

* WrapPanel

   StackPanelと同様にUIを並べるが、幅、高さに合わせてUIを自動的に折り返して配置する

* DockPanel

   UIを上下左右に配置するためのコンテナ。メニュー、ステータスバー、サイドバーなどを配置するときに用いる

* Grid

   UIをセル状に配置するためのコントロール

* Canvas

   UIを自由に配置するためのコンテナ。座標などを指定する。

コンテナの配置は入れ子にすることができる。例えばドックパネルの中にグリッドを配置できる

------------------------
シェイプ
------------------------

ベクターグラフィックで図形を描画する。UIの中に配置したり、シェイプの中にUIを組み込むこともできる。

------------------
メディア
------------------







